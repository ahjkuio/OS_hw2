Работа по заданию:
1) Пользовательским программам не нужны все внутренние структуры ядра, поэтому создадим отдельный заголовочный файл для пользовательского пространства. Создадим структуру procinfo.h
2) include procinfo.h в файле kernel/proc.h:
3) Добавим новый системный вызов в файле kernel/syscall.h
4) Добавим в kernel/syscall.c - extern uint64 sys_ps_listinfo(void); [SYS_ps_listinfo] sys_ps_listinfo, ;
5) Реализуем системным вызов sys_ps_listinfo(void) в kernel/sysproc.c
6) Добавим строку entry("ps_listinfo") в user/usys.pl;
7) Добавим строки #include "procinfo.h"; int ps_listinfo(struct procinfo*, int); в user/user.h
8) Создаем тестовую утилиту в user/pstest.c
9) Создаем утилиту, выводящую информацию о всех запущенных процессах в user/ps.c

---------------------------------------------
<<СП Д/3 No2 Представление процессов в ядре
Операционные системы, весна 2024

(1) Разработать структуру procinfo представляющую информацию о запущенном процессе: имя процесса, состояние, идентификатор родительского процесса. Сделать структуру доступной и из пользовательского пространства и из пространства ядра.

(2) Реализовать системный вызов int ps_listinfo (struct procinfo *plist, int lim); возвращающий массив с информацией о всех запущенных процессах. Предельное количество элементов выходного массива задается параметром lim.
• Если в качестве plist передано NULL, вернуть количество процессов, параметр 1im игнорируется.
• Если количество процессов превышает 1im, вернуть ошибку (отрицательное значение или значение >1im в данном случае запрашивающее приложение может запросить увеличение размера буфера).
• Если запись по указанному адресу пользовательского процесса недопустима, вернуть отрицательное значение (код ошибки, отличный от случая недостаточного размера буфера.
• Если количество процессом меньше lim, записать в plist информацию о них и вернуть количество записанных элементов.

Оптимизировать работу системного вызова таким образом, чтобы массив структур procinfo в ядре не формировался: копировать в пользовательское пространство поэлементно (при ошибке или недостаточном размере буфера считаем, что содержимое plist непредсказуемо).

Реализация должна учитывать, что при исследовании каждого конкретного процесса - элемента. таблицы процессов - его следует заблокировать встроенным в структуру ргос спин- блокировщиком: получить блокировку, проверить состояние процесса, если используется - записать информацию о нем. После обработки снять блокировку, очень важно снять блокировку даже при возникновении ошибки. Для доступа к родительскому процессу следует удерживать глобальный wait_lock.

Хотя системный вызов позволяет предварительно определить количество процессов на какой-то момент времени, нельзя гарантировать, что их количество не изменится между последовательными вызовами, поэтому его нельзя использовать в качестве верхней границы количества процессов, но можно в качестве его (количества) оценки. Можно, конечно, учесть, что ядро хуб жестко лимитирует количество процессов в системе, но в решении этой задачи следует избегать использования этого системного параметра для приближения к ситуации реальной ОС. Поэтому общая схема применения данного системного следующая: программа заводит буфер некоторого замера и делает вызов. Если размер буфера недостаточен, нужно завести буфер большего размера и т. д., до тех пор, пока все процессы не будут получены.

(3) Протестировать системный вызов в разных ситуациях (недостаточный размер буфера, некорректный адрес и т.д.). Приложить тестовую утилиту.
(4) Реализовать утилиту ps выводящую информацию о всех запущенных процессах.

----------------------------------------------------------------
xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
